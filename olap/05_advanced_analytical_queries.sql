-- =====================================================
-- PAKISTAN SALES DATA ANALYSIS PROJECT
-- ADVANCED ANALYTICAL QUERIES WITH WINDOW FUNCTIONS
-- =====================================================
-- This script contains advanced analytical queries demonstrating:
-- - Window Functions (RANK, DENSE_RANK, ROW_NUMBER)
-- - Correlated Subqueries
-- - Cumulative Sums and Moving Averages
-- - CASE Statements and COALESCE Functions
-- - Advanced Table Analysis

USE ROLE ACCOUNTADMIN;
USE DATABASE PAKISTAN_SALES_OLAP_DB;
USE WAREHOUSE PAKISTAN_OLAP_WH;

-- =====================================================
-- 1. WINDOW FUNCTIONS - RANKING ANALYSIS
-- =====================================================

-- Top 10 customers by total spending with ranking
CREATE OR REPLACE VIEW ANALYTICS.TOP_CUSTOMERS_RANKING AS
SELECT 
    CUSTOMER_FULL_NAME,
    PRIMARY_PROVINCE,
    TOTAL_SPENT,
    RANK() OVER (ORDER BY TOTAL_SPENT DESC) as RANK_BY_SPENDING,
    DENSE_RANK() OVER (ORDER BY TOTAL_SPENT DESC) as DENSE_RANK_BY_SPENDING,
    ROW_NUMBER() OVER (ORDER BY TOTAL_SPENT DESC) as ROW_NUMBER_BY_SPENDING,
    RANK() OVER (PARTITION BY PRIMARY_PROVINCE ORDER BY TOTAL_SPENT DESC) as PROVINCE_RANK,
    NTILE(4) OVER (ORDER BY TOTAL_SPENT DESC) as QUARTILE
FROM DIMENSIONS.DIM_CUSTOMER
WHERE IS_ACTIVE = TRUE
QUALIFY ROW_NUMBER() OVER (ORDER BY TOTAL_SPENT DESC) <= 10;

-- Top products by revenue with ranking by category
CREATE OR REPLACE VIEW ANALYTICS.TOP_PRODUCTS_RANKING AS
SELECT 
    PRODUCT_NAME,
    CATEGORY_NAME,
    BRAND,
    TOTAL_REVENUE,
    RANK() OVER (PARTITION BY CATEGORY_NAME ORDER BY TOTAL_REVENUE DESC) as CATEGORY_RANK,
    DENSE_RANK() OVER (PARTITION BY CATEGORY_NAME ORDER BY TOTAL_REVENUE DESC) as CATEGORY_DENSE_RANK,
    ROW_NUMBER() OVER (PARTITION BY CATEGORY_NAME ORDER BY TOTAL_REVENUE DESC) as CATEGORY_ROW_NUMBER,
    RANK() OVER (ORDER BY TOTAL_REVENUE DESC) as OVERALL_RANK,
    NTILE(5) OVER (PARTITION BY CATEGORY_NAME ORDER BY TOTAL_REVENUE DESC) as CATEGORY_QUINTILE
FROM DIMENSIONS.DIM_PRODUCT
WHERE IS_ACTIVE = TRUE
QUALIFY ROW_NUMBER() OVER (PARTITION BY CATEGORY_NAME ORDER BY TOTAL_REVENUE DESC) <= 5;

-- Employee performance ranking by store
CREATE OR REPLACE VIEW ANALYTICS.EMPLOYEE_PERFORMANCE_RANKING AS
SELECT 
    EMPLOYEE_FULL_NAME,
    JOB_TITLE,
    STORE_NAME,
    STORE_PROVINCE,
    SALARY,
    RANK() OVER (PARTITION BY STORE_ID ORDER BY SALARY DESC) as STORE_SALARY_RANK,
    DENSE_RANK() OVER (PARTITION BY DEPARTMENT ORDER BY SALARY DESC) as DEPARTMENT_SALARY_RANK,
    ROW_NUMBER() OVER (PARTITION BY JOB_TITLE ORDER BY SALARY DESC) as JOB_TITLE_SALARY_RANK,
    PERCENT_RANK() OVER (PARTITION BY STORE_ID ORDER BY SALARY) as STORE_SALARY_PERCENTILE,
    CUME_DIST() OVER (PARTITION BY STORE_ID ORDER BY SALARY) as STORE_SALARY_CUMULATIVE_DIST
FROM DIMENSIONS.DIM_EMPLOYEE
WHERE IS_ACTIVE = TRUE;

-- =====================================================
-- 2. CUMULATIVE SUMS AND MOVING AVERAGES
-- =====================================================

-- Monthly sales with cumulative totals and moving averages
CREATE OR REPLACE VIEW ANALYTICS.MONTHLY_SALES_CUMULATIVE AS
SELECT 
    YEAR,
    MONTH_NAME,
    MONTH,
    MONTHLY_SALES,
    MONTHLY_ORDERS,
    -- Cumulative totals
    SUM(MONTHLY_SALES) OVER (ORDER BY YEAR, MONTH ROWS UNBOUNDED PRECEDING) as CUMULATIVE_SALES,
    SUM(MONTHLY_ORDERS) OVER (ORDER BY YEAR, MONTH ROWS UNBOUNDED PRECEDING) as CUMULATIVE_ORDERS,
    -- Moving averages
    AVG(MONTHLY_SALES) OVER (ORDER BY YEAR, MONTH ROWS 2 PRECEDING) as MOVING_AVG_3_MONTHS,
    AVG(MONTHLY_SALES) OVER (ORDER BY YEAR, MONTH ROWS 5 PRECEDING) as MOVING_AVG_6_MONTHS,
    AVG(MONTHLY_SALES) OVER (ORDER BY YEAR, MONTH ROWS 11 PRECEDING) as MOVING_AVG_12_MONTHS,
    -- Growth rates
    LAG(MONTHLY_SALES, 1) OVER (ORDER BY YEAR, MONTH) as PREVIOUS_MONTH_SALES,
    (MONTHLY_SALES - LAG(MONTHLY_SALES, 1) OVER (ORDER BY YEAR, MONTH)) / 
        NULLIF(LAG(MONTHLY_SALES, 1) OVER (ORDER BY YEAR, MONTH), 0) * 100 as MONTH_OVER_MONTH_GROWTH_PCT
FROM (
    SELECT 
        dt.YEAR,
        dt.MONTH_NAME,
        dt.MONTH,
        SUM(fs.SALES_AMOUNT) as MONTHLY_SALES,
        COUNT(DISTINCT fs.ORDER_ID) as MONTHLY_ORDERS
    FROM FACTS.FACT_SALES fs
    JOIN DIMENSIONS.DIM_TIME dt ON fs.TIME_KEY = dt.TIME_KEY
    GROUP BY dt.YEAR, dt.MONTH_NAME, dt.MONTH
)
ORDER BY YEAR, MONTH;

-- Customer spending patterns with cumulative analysis
CREATE OR REPLACE VIEW ANALYTICS.CUSTOMER_SPENDING_CUMULATIVE AS
SELECT 
    CUSTOMER_FULL_NAME,
    PRIMARY_PROVINCE,
    ORDER_DATE,
    ORDER_AMOUNT,
    -- Cumulative spending by customer
    SUM(ORDER_AMOUNT) OVER (
        PARTITION BY CUSTOMER_KEY 
        ORDER BY ORDER_DATE 
        ROWS UNBOUNDED PRECEDING
    ) as CUMULATIVE_CUSTOMER_SPENDING,
    -- Running average order value
    AVG(ORDER_AMOUNT) OVER (
        PARTITION BY CUSTOMER_KEY 
        ORDER BY ORDER_DATE 
        ROWS 4 PRECEDING
    ) as MOVING_AVG_ORDER_VALUE_5_ORDERS,
    -- Order sequence
    ROW_NUMBER() OVER (
        PARTITION BY CUSTOMER_KEY 
        ORDER BY ORDER_DATE
    ) as ORDER_SEQUENCE,
    -- Days between orders
    DATEDIFF('day', 
        LAG(ORDER_DATE, 1) OVER (PARTITION BY CUSTOMER_KEY ORDER BY ORDER_DATE),
        ORDER_DATE
    ) as DAYS_SINCE_PREVIOUS_ORDER
FROM (
    SELECT 
        c.CUSTOMER_KEY,
        c.CUSTOMER_FULL_NAME,
        c.PRIMARY_PROVINCE,
        fs.ORDER_DATE,
        fs.SALES_AMOUNT as ORDER_AMOUNT
    FROM FACTS.FACT_SALES fs
    JOIN DIMENSIONS.DIM_CUSTOMER c ON fs.CUSTOMER_KEY = c.CUSTOMER_KEY
)
ORDER BY CUSTOMER_FULL_NAME, ORDER_DATE;

-- =====================================================
-- 3. CORRELATED SUBQUERIES ANALYSIS
-- =====================================================

-- Products with above-average performance in their category
CREATE OR REPLACE VIEW ANALYTICS.ABOVE_AVERAGE_PRODUCTS AS
SELECT 
    p1.PRODUCT_NAME,
    p1.CATEGORY_NAME,
    p1.TOTAL_REVENUE,
    p1.TOTAL_PROFIT,
    (SELECT AVG(p2.TOTAL_REVENUE) 
     FROM DIMENSIONS.DIM_PRODUCT p2 
     WHERE p2.CATEGORY_NAME = p1.CATEGORY_NAME) as CATEGORY_AVG_REVENUE,
    (SELECT AVG(p2.TOTAL_PROFIT) 
     FROM DIMENSIONS.DIM_PRODUCT p2 
     WHERE p2.CATEGORY_NAME = p1.CATEGORY_NAME) as CATEGORY_AVG_PROFIT,
    CASE 
        WHEN p1.TOTAL_REVENUE > (SELECT AVG(p2.TOTAL_REVENUE) 
                                 FROM DIMENSIONS.DIM_PRODUCT p2 
                                 WHERE p2.CATEGORY_NAME = p1.CATEGORY_NAME) 
        THEN 'Above Average'
        ELSE 'Below Average'
    END as REVENUE_PERFORMANCE,
    CASE 
        WHEN p1.TOTAL_PROFIT > (SELECT AVG(p2.TOTAL_PROFIT) 
                                FROM DIMENSIONS.DIM_PRODUCT p2 
                                WHERE p2.CATEGORY_NAME = p1.CATEGORY_NAME) 
        THEN 'Above Average'
        ELSE 'Below Average'
    END as PROFIT_PERFORMANCE
FROM DIMENSIONS.DIM_PRODUCT p1
WHERE p1.IS_ACTIVE = TRUE;

-- Stores with performance above provincial average
CREATE OR REPLACE VIEW ANALYTICS.ABOVE_AVERAGE_STORES AS
SELECT 
    s1.STORE_NAME,
    s1.PROVINCE,
    s1.TOTAL_SALES,
    s1.TOTAL_ORDERS,
    s1.AVG_ORDER_VALUE,
    (SELECT AVG(s2.TOTAL_SALES) 
     FROM DIMENSIONS.DIM_STORE s2 
     WHERE s2.PROVINCE = s1.PROVINCE) as PROVINCE_AVG_SALES,
    (SELECT AVG(s2.AVG_ORDER_VALUE) 
     FROM DIMENSIONS.DIM_STORE s2 
     WHERE s2.PROVINCE = s1.PROVINCE) as PROVINCE_AVG_ORDER_VALUE,
    CASE 
        WHEN s1.TOTAL_SALES > (SELECT AVG(s2.TOTAL_SALES) 
                               FROM DIMENSIONS.DIM_STORE s2 
                               WHERE s2.PROVINCE = s1.PROVINCE) 
        THEN 'Above Provincial Average'
        ELSE 'Below Provincial Average'
    END as SALES_PERFORMANCE
FROM DIMENSIONS.DIM_STORE s1
WHERE s1.IS_ACTIVE = TRUE;

-- =====================================================
-- 4. CASE STATEMENTS AND COALESCE FUNCTIONS
-- =====================================================

-- Customer segmentation with advanced case logic
CREATE OR REPLACE VIEW ANALYTICS.ADVANCED_CUSTOMER_SEGMENTATION AS
SELECT 
    CUSTOMER_FULL_NAME,
    PRIMARY_PROVINCE,
    TOTAL_SPENT,
    TOTAL_ORDERS,
    AVG_ORDER_VALUE,
    DAYS_SINCE_LAST_ORDER,
    -- Advanced segmentation using CASE statements
    CASE 
        WHEN TOTAL_SPENT >= 10000 AND TOTAL_ORDERS >= 20 THEN 'VIP Customer'
        WHEN TOTAL_SPENT >= 5000 AND TOTAL_ORDERS >= 10 THEN 'Premium Customer'
        WHEN TOTAL_SPENT >= 1000 AND TOTAL_ORDERS >= 5 THEN 'Regular Customer'
        WHEN TOTAL_SPENT >= 500 THEN 'Occasional Customer'
        ELSE 'New Customer'
    END as CUSTOMER_TIER,
    
    CASE 
        WHEN DAYS_SINCE_LAST_ORDER <= 30 THEN 'Active'
        WHEN DAYS_SINCE_LAST_ORDER <= 90 THEN 'At Risk'
        WHEN DAYS_SINCE_LAST_ORDER <= 180 THEN 'Churning'
        ELSE 'Churned'
    END as CUSTOMER_STATUS,
    
    CASE 
        WHEN AVG_ORDER_VALUE >= 1000 THEN 'High Value'
        WHEN AVG_ORDER_VALUE >= 500 THEN 'Medium Value'
        WHEN AVG_ORDER_VALUE >= 100 THEN 'Low Value'
        ELSE 'Very Low Value'
    END as ORDER_VALUE_CATEGORY,
    
    -- Using COALESCE for handling NULL values
    COALESCE(PRIMARY_PROVINCE, 'Unknown') as PROVINCE_DISPLAY,
    COALESCE(AVG_ORDER_VALUE, 0) as DISPLAY_ORDER_VALUE,
    COALESCE(DAYS_SINCE_LAST_ORDER, 999) as DISPLAY_DAYS_SINCE_LAST_ORDER
FROM DIMENSIONS.DIM_CUSTOMER
WHERE IS_ACTIVE = TRUE;

-- Product performance classification with case statements
CREATE OR REPLACE VIEW ANALYTICS.PRODUCT_PERFORMANCE_CLASSIFICATION AS
SELECT 
    PRODUCT_NAME,
    CATEGORY_NAME,
    BRAND,
    TOTAL_REVENUE,
    TOTAL_PROFIT,
    PROFIT_MARGIN_PERCENT,
    TOTAL_QUANTITY_SOLD,
    -- Performance classification
    CASE 
        WHEN TOTAL_REVENUE >= 100000 THEN 'Top Performer'
        WHEN TOTAL_REVENUE >= 50000 THEN 'High Performer'
        WHEN TOTAL_REVENUE >= 10000 THEN 'Medium Performer'
        WHEN TOTAL_REVENUE >= 1000 THEN 'Low Performer'
        ELSE 'Underperformer'
    END as REVENUE_PERFORMANCE_LEVEL,
    
    CASE 
        WHEN PROFIT_MARGIN_PERCENT >= 50 THEN 'High Margin'
        WHEN PROFIT_MARGIN_PERCENT >= 30 THEN 'Medium Margin'
        WHEN PROFIT_MARGIN_PERCENT >= 15 THEN 'Low Margin'
        ELSE 'Very Low Margin'
    END as MARGIN_CATEGORY,
    
    CASE 
        WHEN TOTAL_QUANTITY_SOLD >= 1000 THEN 'High Volume'
        WHEN TOTAL_QUANTITY_SOLD >= 500 THEN 'Medium Volume'
        WHEN TOTAL_QUANTITY_SOLD >= 100 THEN 'Low Volume'
        ELSE 'Very Low Volume'
    END as VOLUME_CATEGORY,
    
    -- Using COALESCE for calculated fields
    COALESCE(PROFIT_MARGIN_PERCENT, 0) as DISPLAY_MARGIN,
    COALESCE(TOTAL_QUANTITY_SOLD, 0) as DISPLAY_QUANTITY,
    COALESCE(TOTAL_PROFIT, 0) as DISPLAY_PROFIT
FROM DIMENSIONS.DIM_PRODUCT
WHERE IS_ACTIVE = TRUE;

-- =====================================================
-- 5. COMPREHENSIVE TABLE ANALYSIS
-- =====================================================

-- Sales performance analysis with multiple dimensions
CREATE OR REPLACE VIEW ANALYTICS.COMPREHENSIVE_SALES_ANALYSIS AS
SELECT 
    -- Time dimensions
    dt.YEAR,
    dt.QUARTER_NAME,
    dt.MONTH_NAME,
    dt.SEASON,
    
    -- Geographic dimensions
    ds.PROVINCE,
    ds.CITY,
    
    -- Product dimensions
    dp.CATEGORY_NAME,
    dp.BRAND,
    
    -- Customer dimensions
    dc.CUSTOMER_SEGMENT,
    dc.INCOME_BAND,
    
    -- Sales metrics
    COUNT(DISTINCT fs.ORDER_ID) as TOTAL_ORDERS,
    COUNT(DISTINCT fs.CUSTOMER_KEY) as UNIQUE_CUSTOMERS,
    SUM(fs.SALES_AMOUNT) as TOTAL_REVENUE,
    SUM(fs.QUANTITY) as TOTAL_QUANTITY,
    AVG(fs.SALES_AMOUNT) as AVG_ORDER_VALUE,
    
    -- Window functions for ranking
    RANK() OVER (PARTITION BY dt.YEAR, dt.QUARTER_NAME ORDER BY SUM(fs.SALES_AMOUNT) DESC) as QUARTER_RANK,
    RANK() OVER (PARTITION BY ds.PROVINCE ORDER BY SUM(fs.SALES_AMOUNT) DESC) as PROVINCE_RANK,
    RANK() OVER (PARTITION BY dp.CATEGORY_NAME ORDER BY SUM(fs.SALES_AMOUNT) DESC) as CATEGORY_RANK,
    
    -- Cumulative analysis
    SUM(SUM(fs.SALES_AMOUNT)) OVER (
        PARTITION BY dt.YEAR 
        ORDER BY dt.QUARTER_NAME, dt.MONTH_NAME 
        ROWS UNBOUNDED PRECEDING
    ) as CUMULATIVE_YEARLY_SALES,
    
    -- Moving averages
    AVG(SUM(fs.SALES_AMOUNT)) OVER (
        PARTITION BY dt.YEAR 
        ORDER BY dt.QUARTER_NAME, dt.MONTH_NAME 
        ROWS 2 PRECEDING
    ) as MOVING_AVG_3_PERIODS,
    
    -- Growth calculations
    LAG(SUM(fs.SALES_AMOUNT), 1) OVER (
        PARTITION BY dt.YEAR 
        ORDER BY dt.QUARTER_NAME, dt.MONTH_NAME
    ) as PREVIOUS_PERIOD_SALES,
    
    (SUM(fs.SALES_AMOUNT) - LAG(SUM(fs.SALES_AMOUNT), 1) OVER (
        PARTITION BY dt.YEAR 
        ORDER BY dt.QUARTER_NAME, dt.MONTH_NAME
    )) / NULLIF(LAG(SUM(fs.SALES_AMOUNT), 1) OVER (
        PARTITION BY dt.YEAR 
        ORDER BY dt.QUARTER_NAME, dt.MONTH_NAME
    ), 0) * 100 as PERIOD_OVER_PERIOD_GROWTH_PCT
    
FROM FACTS.FACT_SALES fs
JOIN DIMENSIONS.DIM_TIME dt ON fs.TIME_KEY = dt.TIME_KEY
JOIN DIMENSIONS.DIM_STORE ds ON fs.STORE_KEY = ds.STORE_KEY
JOIN DIMENSIONS.DIM_PRODUCT dp ON fs.PRODUCT_KEY = dp.PRODUCT_KEY
JOIN DIMENSIONS.DIM_CUSTOMER dc ON fs.CUSTOMER_KEY = dc.CUSTOMER_KEY
GROUP BY 
    dt.YEAR, dt.QUARTER_NAME, dt.MONTH_NAME, dt.SEASON,
    ds.PROVINCE, ds.CITY,
    dp.CATEGORY_NAME, dp.BRAND,
    dc.CUSTOMER_SEGMENT, dc.INCOME_BAND
ORDER BY 
    dt.YEAR DESC, dt.QUARTER_NAME, dt.MONTH_NAME,
    TOTAL_REVENUE DESC;

-- Employee salary analysis with comprehensive metrics
CREATE OR REPLACE VIEW ANALYTICS.COMPREHENSIVE_EMPLOYEE_ANALYSIS AS
SELECT 
    -- Employee details
    e.EMPLOYEE_FULL_NAME,
    e.JOB_TITLE,
    e.DEPARTMENT,
    e.STORE_NAME,
    e.STORE_PROVINCE,
    
    -- Salary information
    e.SALARY,
    e.SALARY_BAND,
    e.DAYS_EMPLOYED,
    
    -- Store performance context
    s.TOTAL_SALES as STORE_TOTAL_SALES,
    s.TOTAL_ORDERS as STORE_TOTAL_ORDERS,
    
    -- Ranking and percentiles
    RANK() OVER (PARTITION BY e.DEPARTMENT ORDER BY e.SALARY DESC) as DEPARTMENT_SALARY_RANK,
    DENSE_RANK() OVER (PARTITION BY e.JOB_TITLE ORDER BY e.SALARY DESC) as JOB_TITLE_SALARY_RANK,
    PERCENT_RANK() OVER (PARTITION BY e.STORE_ID ORDER BY e.SALARY) as STORE_SALARY_PERCENTILE,
    NTILE(4) OVER (PARTITION BY e.DEPARTMENT ORDER BY e.SALARY DESC) as DEPARTMENT_QUARTILE,
    
    -- Salary analysis
    AVG(e.SALARY) OVER (PARTITION BY e.DEPARTMENT) as DEPARTMENT_AVG_SALARY,
    AVG(e.SALARY) OVER (PARTITION BY e.JOB_TITLE) as JOB_TITLE_AVG_SALARY,
    AVG(e.SALARY) OVER (PARTITION BY e.STORE_PROVINCE) as PROVINCE_AVG_SALARY,
    
    -- Performance indicators
    CASE 
        WHEN e.SALARY > AVG(e.SALARY) OVER (PARTITION BY e.DEPARTMENT) THEN 'Above Department Average'
        ELSE 'Below Department Average'
    END as SALARY_PERFORMANCE_VS_DEPARTMENT,
    
    CASE 
        WHEN e.SALARY > AVG(e.SALARY) OVER (PARTITION BY e.JOB_TITLE) THEN 'Above Job Title Average'
        ELSE 'Below Job Title Average'
    END as SALARY_PERFORMANCE_VS_JOB_TITLE,
    
    -- Using COALESCE for calculated fields
    COALESCE(e.SALARY, 0) as DISPLAY_SALARY,
    COALESCE(e.DAYS_EMPLOYED, 0) as DISPLAY_DAYS_EMPLOYED
    
FROM DIMENSIONS.DIM_EMPLOYEE e
JOIN DIMENSIONS.DIM_STORE s ON e.STORE_ID = s.STORE_ID
WHERE e.IS_ACTIVE = TRUE
ORDER BY e.DEPARTMENT, e.SALARY DESC;

-- =====================================================
-- 6. ADVANCED WINDOW FUNCTIONS WITH PARTITIONING
-- =====================================================

-- Product performance by store with advanced window functions
CREATE OR REPLACE VIEW ANALYTICS.PRODUCT_STORE_PERFORMANCE AS
SELECT 
    dp.PRODUCT_NAME,
    dp.CATEGORY_NAME,
    ds.STORE_NAME,
    ds.PROVINCE,
    SUM(fs.SALES_AMOUNT) as STORE_PRODUCT_REVENUE,
    SUM(fs.QUANTITY) as STORE_PRODUCT_QUANTITY,
    
    -- Ranking within store
    RANK() OVER (PARTITION BY ds.STORE_ID ORDER BY SUM(fs.SALES_AMOUNT) DESC) as STORE_PRODUCT_RANK,
    DENSE_RANK() OVER (PARTITION BY ds.STORE_ID ORDER BY SUM(fs.SALES_AMOUNT) DESC) as STORE_PRODUCT_DENSE_RANK,
    
    -- Ranking within province
    RANK() OVER (PARTITION BY ds.PROVINCE ORDER BY SUM(fs.SALES_AMOUNT) DESC) as PROVINCE_PRODUCT_RANK,
    
    -- Ranking within category
    RANK() OVER (PARTITION BY dp.CATEGORY_NAME ORDER BY SUM(fs.SALES_AMOUNT) DESC) as CATEGORY_PRODUCT_RANK,
    
    -- Percentile rankings
    PERCENT_RANK() OVER (PARTITION BY ds.STORE_ID ORDER BY SUM(fs.SALES_AMOUNT)) as STORE_PERCENTILE,
    CUME_DIST() OVER (PARTITION BY ds.STORE_ID ORDER BY SUM(fs.SALES_AMOUNT)) as STORE_CUMULATIVE_DIST,
    
    -- Moving averages within store
    AVG(SUM(fs.SALES_AMOUNT)) OVER (
        PARTITION BY ds.STORE_ID 
        ORDER BY dp.CATEGORY_NAME 
        ROWS 1 PRECEDING
    ) as STORE_CATEGORY_MOVING_AVG,
    
    -- Store contribution to product total
    SUM(fs.SALES_AMOUNT) / SUM(SUM(fs.SALES_AMOUNT)) OVER (PARTITION BY dp.PRODUCT_KEY) * 100 as STORE_CONTRIBUTION_PCT
    
FROM FACTS.FACT_SALES fs
JOIN DIMENSIONS.DIM_PRODUCT dp ON fs.PRODUCT_KEY = dp.PRODUCT_KEY
JOIN DIMENSIONS.DIM_STORE ds ON fs.STORE_KEY = ds.STORE_KEY
GROUP BY dp.PRODUCT_NAME, dp.CATEGORY_NAME, ds.STORE_NAME, ds.PROVINCE, ds.STORE_ID, dp.PRODUCT_KEY
ORDER BY ds.STORE_NAME, STORE_PRODUCT_RANK;

-- =====================================================
-- 7. QUERY EXECUTION AND TESTING
-- =====================================================

-- Test the views to ensure they work correctly
SELECT 'Testing TOP_CUSTOMERS_RANKING' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.TOP_CUSTOMERS_RANKING
UNION ALL
SELECT 'Testing TOP_PRODUCTS_RANKING' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.TOP_PRODUCTS_RANKING
UNION ALL
SELECT 'Testing EMPLOYEE_PERFORMANCE_RANKING' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.EMPLOYEE_PERFORMANCE_RANKING
UNION ALL
SELECT 'Testing MONTHLY_SALES_CUMULATIVE' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.MONTHLY_SALES_CUMULATIVE
UNION ALL
SELECT 'Testing CUSTOMER_SPENDING_CUMULATIVE' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.CUSTOMER_SPENDING_CUMULATIVE
UNION ALL
SELECT 'Testing ABOVE_AVERAGE_PRODUCTS' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.ABOVE_AVERAGE_PRODUCTS
UNION ALL
SELECT 'Testing ABOVE_AVERAGE_STORES' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.ABOVE_AVERAGE_STORES
UNION ALL
SELECT 'Testing ADVANCED_CUSTOMER_SEGMENTATION' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.ADVANCED_CUSTOMER_SEGMENTATION
UNION ALL
SELECT 'Testing PRODUCT_PERFORMANCE_CLASSIFICATION' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.PRODUCT_PERFORMANCE_CLASSIFICATION
UNION ALL
SELECT 'Testing COMPREHENSIVE_SALES_ANALYSIS' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.COMPREHENSIVE_SALES_ANALYSIS
UNION ALL
SELECT 'Testing COMPREHENSIVE_EMPLOYEE_ANALYSIS' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.COMPREHENSIVE_EMPLOYEE_ANALYSIS
UNION ALL
SELECT 'Testing PRODUCT_STORE_PERFORMANCE' as TEST_NAME, COUNT(*) as RECORD_COUNT FROM ANALYTICS.PRODUCT_STORE_PERFORMANCE;

-- =====================================================
-- END OF ADVANCED ANALYTICAL QUERIES
-- =====================================================
