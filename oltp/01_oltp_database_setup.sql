-- =====================================================
-- PAKISTAN SALES DATA ANALYSIS PROJECT
-- OLTP DATABASE SETUP (Transactional Database)
-- =====================================================
-- This script creates the operational database for day-to-day transactions
-- OLTP = Online Transaction Processing (Normalized, 3NF structure)

USE ROLE ACCOUNTADMIN;

-- =====================================================
-- 1. CREATE DATABASE AND SCHEMAS
-- =====================================================

-- Main database for the sales project
CREATE OR REPLACE DATABASE PAKISTAN_SALES_OLTP_DB
    DATA_RETENTION_TIME_IN_DAYS = 7
    MAX_DATA_EXTENSION_TIME_IN_DAYS = 90
    COMMENT = 'OLTP Database for Pakistan Sales Data - Transactional Operations';

-- Create schemas for different purposes
CREATE OR REPLACE SCHEMA PAKISTAN_SALES_OLTP_DB.STAGING
    COMMENT = 'Staging area for data loading and validation';

CREATE OR REPLACE SCHEMA PAKISTAN_SALES_OLTP_DB.OLTP
    COMMENT = 'Operational database for transactional data (3NF normalized)';

CREATE OR REPLACE SCHEMA PAKISTAN_SALES_OLTP_DB.AUDIT
    COMMENT = 'Audit and logging information';

-- =====================================================
-- 2. CREATE WAREHOUSES
-- =====================================================

-- Warehouse for OLTP operations (small, fast)
CREATE OR REPLACE WAREHOUSE PAKISTAN_OLTP_WH
    WAREHOUSE_SIZE = 'X-SMALL'
    AUTO_SUSPEND = 60
    AUTO_RESUME = TRUE
    MIN_CLUSTER_COUNT = 1
    MAX_CLUSTER_COUNT = 2
    SCALING_POLICY = 'STANDARD'
    COMMENT = 'Warehouse for OLTP transactional operations';

-- Warehouse for data loading operations
CREATE OR REPLACE WAREHOUSE PAKISTAN_LOADING_WH
    WAREHOUSE_SIZE = 'SMALL'
    AUTO_SUSPEND = 300
    AUTO_RESUME = TRUE
    MIN_CLUSTER_COUNT = 1
    MAX_CLUSTER_COUNT = 3
    SCALING_POLICY = 'STANDARD'
    COMMENT = 'Warehouse for data loading and ETL operations';

-- =====================================================
-- 3. CREATE FILE FORMATS AND STAGES
-- =====================================================

USE SCHEMA PAKISTAN_SALES_OLTP_DB.STAGING;

-- CSV file format for data loading
CREATE OR REPLACE FILE FORMAT STAGING.CSV_FORMAT
    TYPE = 'CSV'
    FIELD_DELIMITER = ','
    RECORD_DELIMITER = '\n'
    SKIP_HEADER = 1
    NULL_IF = ('NULL', 'null', '')
    EMPTY_FIELD_AS_NULL = TRUE
    TRIM_SPACE = TRUE
    ERROR_ON_COLUMN_COUNT_MISMATCH = FALSE
    COMMENT = 'CSV format for Pakistan sales data files';

-- Local stage for file uploads
CREATE OR REPLACE STAGE STAGING.CSV_STAGE
    FILE_FORMAT = STAGING.CSV_FORMAT
    COMMENT = 'Stage for CSV file uploads';

-- =====================================================
-- 4. CREATE OLTP TABLES (3NF Normalized Structure)
-- =====================================================

USE SCHEMA PAKISTAN_SALES_OLTP_DB.OLTP;

-- Customer dimension table
CREATE OR REPLACE TABLE OLTP.CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    FIRST_NAME STRING NOT NULL,
    LAST_NAME STRING NOT NULL,
    EMAIL STRING UNIQUE,
    PHONE STRING,
    DATE_OF_BIRTH DATE,
    GENDER STRING CHECK (GENDER IN ('M', 'F', 'Other')),
    MARITAL_STATUS STRING CHECK (MARITAL_STATUS IN ('Single', 'Married', 'Divorced', 'Widowed')),
    EDUCATION_LEVEL STRING CHECK (EDUCATION_LEVEL IN ('Primary', 'Secondary', 'Higher Secondary', 'Bachelor', 'Master', 'PhD', 'Other')),
    ANNUAL_INCOME DECIMAL(12,2),
    CUSTOMER_SEGMENT STRING CHECK (CUSTOMER_SEGMENT IN ('Premium', 'Regular', 'Occasional', 'VIP')),
    REGISTRATION_DATE DATE NOT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Customer master data - normalized customer information';

-- Customer addresses table (1:many relationship)
CREATE OR REPLACE TABLE OLTP.CUSTOMER_ADDRESSES (
    ADDRESS_ID INT PRIMARY KEY,
    CUSTOMER_ID INT NOT NULL REFERENCES OLTP.CUSTOMERS(CUSTOMER_ID),
    ADDRESS_TYPE STRING CHECK (ADDRESS_TYPE IN ('Primary', 'Secondary', 'Billing', 'Shipping')),
    STREET_ADDRESS STRING NOT NULL,
    CITY STRING NOT NULL,
    PROVINCE STRING NOT NULL,
    POSTAL_CODE STRING,
    COUNTRY STRING DEFAULT 'Pakistan',
    IS_DEFAULT BOOLEAN DEFAULT FALSE,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Customer addresses - normalized address information';

-- Product categories table
CREATE OR REPLACE TABLE OLTP.PRODUCT_CATEGORIES (
    CATEGORY_ID INT PRIMARY KEY,
    CATEGORY_NAME STRING NOT NULL UNIQUE,
    DESCRIPTION STRING,
    PARENT_CATEGORY_ID INT REFERENCES OLTP.PRODUCT_CATEGORIES(CATEGORY_ID),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Product categories - hierarchical product classification';

-- Products table
CREATE OR REPLACE TABLE OLTP.PRODUCTS (
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME STRING NOT NULL,
    CATEGORY_ID INT NOT NULL REFERENCES OLTP.PRODUCT_CATEGORIES(CATEGORY_ID),
    BRAND STRING NOT NULL,
    MODEL STRING,
    DESCRIPTION STRING,
    UNIT_COST DECIMAL(10,2) NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    MSRP DECIMAL(10,2),
    WEIGHT_KG DECIMAL(8,3),
    DIMENSIONS_CM STRING,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Product master data - normalized product information';

-- Stores table
CREATE OR REPLACE TABLE OLTP.STORES (
    STORE_ID INT PRIMARY KEY,
    STORE_NAME STRING NOT NULL,
    STORE_CODE STRING UNIQUE NOT NULL,
    ADDRESS STRING NOT NULL,
    CITY STRING NOT NULL,
    PROVINCE STRING NOT NULL,
    POSTAL_CODE STRING,
    PHONE STRING,
    EMAIL STRING,
    MANAGER_ID INT, -- Will reference employees table
    STORE_TYPE STRING CHECK (STORE_TYPE IN ('Retail', 'Supermarket', 'Department Store', 'Specialty Store', 'Outlet', 'Mall')),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    OPENING_DATE DATE,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Store locations - normalized store information';

-- Employees table
CREATE OR REPLACE TABLE OLTP.EMPLOYEES (
    EMPLOYEE_ID INT PRIMARY KEY,
    FIRST_NAME STRING NOT NULL,
    LAST_NAME STRING NOT NULL,
    EMAIL STRING UNIQUE,
    PHONE STRING,
    HIRE_DATE DATE NOT NULL,
    JOB_TITLE STRING NOT NULL,
    DEPARTMENT STRING NOT NULL,
    STORE_ID INT NOT NULL REFERENCES OLTP.STORES(STORE_ID),
    MANAGER_ID INT REFERENCES OLTP.EMPLOYEES(EMPLOYEE_ID),
    SALARY DECIMAL(10,2),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Employee data - normalized employee information';

-- Orders table (fact table for transactions)
CREATE OR REPLACE TABLE OLTP.ORDERS (
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID INT NOT NULL REFERENCES OLTP.CUSTOMERS(CUSTOMER_ID),
    STORE_ID INT NOT NULL REFERENCES OLTP.STORES(STORE_ID),
    EMPLOYEE_ID INT NOT NULL REFERENCES OLTP.EMPLOYEES(EMPLOYEE_ID),
    ORDER_DATE DATE NOT NULL,
    REQUIRED_DATE DATE,
    SHIP_DATE DATE,
    ORDER_STATUS STRING CHECK (ORDER_STATUS IN ('Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled')),
    SHIP_METHOD STRING CHECK (SHIP_METHOD IN ('Standard', 'Express', 'Same Day', 'Pickup', 'Courier')),
    SHIPPING_ADDRESS_ID INT REFERENCES OLTP.CUSTOMER_ADDRESSES(ADDRESS_ID),
    TOTAL_AMOUNT DECIMAL(12,2) NOT NULL,
    TAX_AMOUNT DECIMAL(12,2) NOT NULL,
    SHIPPING_COST DECIMAL(8,2) DEFAULT 0,
    DISCOUNT_AMOUNT DECIMAL(12,2) DEFAULT 0,
    FINAL_AMOUNT DECIMAL(12,2) NOT NULL,
    PAYMENT_METHOD STRING CHECK (PAYMENT_METHOD IN ('Cash', 'Credit Card', 'Debit Card', 'Mobile Banking', 'Bank Transfer', 'EasyPaisa', 'JazzCash')),
    PAYMENT_STATUS STRING CHECK (PAYMENT_STATUS IN ('Pending', 'Completed', 'Failed', 'Refunded')),
    NOTES STRING,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Order headers - main transaction fact table';

-- Order details table (order line items)
CREATE OR REPLACE TABLE OLTP.ORDER_DETAILS (
    ORDER_DETAIL_ID INT PRIMARY KEY,
    ORDER_ID INT NOT NULL REFERENCES OLTP.ORDERS(ORDER_ID),
    PRODUCT_ID INT NOT NULL REFERENCES OLTP.PRODUCTS(PRODUCT_ID),
    QUANTITY_ORDERED INT NOT NULL CHECK (QUANTITY_ORDERED > 0),
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    DISCOUNT_PERCENT DECIMAL(5,2) DEFAULT 0 CHECK (DISCOUNT_PERCENT >= 0 AND DISCOUNT_PERCENT <= 100),
    TOTAL_LINE_AMOUNT DECIMAL(12,2) NOT NULL,
    CREATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Order line items - detailed transaction information';

-- =====================================================
-- 5. CREATE INDEXES FOR PERFORMANCE
-- =====================================================

-- Indexes for foreign keys and commonly queried columns
CREATE OR REPLACE INDEX OLTP.IDX_CUSTOMERS_EMAIL ON OLTP.CUSTOMERS(EMAIL);
CREATE OR REPLACE INDEX OLTP.IDX_CUSTOMERS_SEGMENT ON OLTP.CUSTOMERS(CUSTOMER_SEGMENT);
CREATE OR REPLACE INDEX OLTP.IDX_CUSTOMERS_REGISTRATION_DATE ON OLTP.CUSTOMERS(REGISTRATION_DATE);

CREATE OR REPLACE INDEX OLTP.IDX_CUSTOMER_ADDRESSES_CUSTOMER_ID ON OLTP.CUSTOMER_ADDRESSES(CUSTOMER_ID);
CREATE OR REPLACE INDEX OLTP.IDX_CUSTOMER_ADDRESSES_PROVINCE ON OLTP.CUSTOMER_ADDRESSES(PROVINCE);

CREATE OR REPLACE INDEX OLTP.IDX_PRODUCTS_CATEGORY_ID ON OLTP.PRODUCTS(CATEGORY_ID);
CREATE OR REPLACE INDEX OLTP.IDX_PRODUCTS_BRAND ON OLTP.PRODUCTS(BRAND);
CREATE OR REPLACE INDEX OLTP.IDX_PRODUCTS_ACTIVE ON OLTP.PRODUCTS(IS_ACTIVE);

CREATE OR REPLACE INDEX OLTP.IDX_STORES_PROVINCE ON OLTP.STORES(PROVINCE);
CREATE OR REPLACE INDEX OLTP.IDX_STORES_CITY ON OLTP.STORES(CITY);

CREATE OR REPLACE INDEX OLTP.IDX_EMPLOYEES_STORE_ID ON OLTP.EMPLOYEES(STORE_ID);
CREATE OR REPLACE INDEX OLTP.IDX_EMPLOYEES_DEPARTMENT ON OLTP.EMPLOYEES(DEPARTMENT);

CREATE OR REPLACE INDEX OLTP.IDX_ORDERS_CUSTOMER_ID ON OLTP.ORDERS(CUSTOMER_ID);
CREATE OR REPLACE INDEX OLTP.IDX_ORDERS_STORE_ID ON OLTP.ORDERS(STORE_ID);
CREATE OR REPLACE INDEX OLTP.IDX_ORDERS_ORDER_DATE ON OLTP.ORDERS(ORDER_DATE);
CREATE OR REPLACE INDEX OLTP.IDX_ORDERS_STATUS ON OLTP.ORDERS(ORDER_STATUS);

CREATE OR REPLACE INDEX OLTP.IDX_ORDER_DETAILS_ORDER_ID ON OLTP.ORDER_DETAILS(ORDER_ID);
CREATE OR REPLACE INDEX OLTP.IDX_ORDER_DETAILS_PRODUCT_ID ON OLTP.ORDER_DETAILS(PRODUCT_ID);

-- =====================================================
-- 6. CREATE STAGING TABLES FOR DATA LOADING
-- =====================================================

USE SCHEMA PAKISTAN_SALES_OLTP_DB.STAGING;

-- Staging table for customers
CREATE OR REPLACE TABLE STAGING.STAGING_CUSTOMERS (
    CUSTOMER_ID INT,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    PHONE STRING,
    DATE_OF_BIRTH DATE,
    GENDER STRING,
    MARITAL_STATUS STRING,
    EDUCATION_LEVEL STRING,
    ANNUAL_INCOME DECIMAL(12,2),
    CUSTOMER_SEGMENT STRING,
    REGISTRATION_DATE DATE,
    IS_ACTIVE BOOLEAN,
    BATCH_ID STRING DEFAULT UUID_STRING(),
    LOAD_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Staging table for customer data loading';

-- Staging table for products
CREATE OR REPLACE TABLE STAGING.STAGING_PRODUCTS (
    PRODUCT_ID INT,
    PRODUCT_NAME STRING,
    CATEGORY_ID INT,
    BRAND STRING,
    MODEL STRING,
    DESCRIPTION STRING,
    UNIT_COST DECIMAL(10,2),
    UNIT_PRICE DECIMAL(10,2),
    MSRP DECIMAL(10,2),
    WEIGHT_KG DECIMAL(8,3),
    DIMENSIONS_CM STRING,
    IS_ACTIVE BOOLEAN,
    BATCH_ID STRING DEFAULT UUID_STRING(),
    LOAD_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Staging table for product data loading';

-- Staging table for orders
CREATE OR REPLACE TABLE STAGING.STAGING_ORDERS (
    ORDER_ID INT,
    CUSTOMER_ID INT,
    PRODUCT_ID INT,
    STORE_ID INT,
    EMPLOYEE_ID INT,
    ORDER_DATE DATE,
    SHIP_DATE DATE,
    QUANTITY_ORDERED INT,
    UNIT_PRICE DECIMAL(10,2),
    DISCOUNT_PERCENT DECIMAL(5,2),
    TOTAL_AMOUNT DECIMAL(12,2),
    PAYMENT_METHOD STRING,
    ORDER_STATUS STRING,
    SHIP_METHOD STRING,
    BATCH_ID STRING DEFAULT UUID_STRING(),
    LOAD_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) COMMENT = 'Staging table for order data loading';

-- =====================================================
-- 7. CREATE AUDIT TABLES
-- =====================================================

USE SCHEMA PAKISTAN_SALES_OLTP_DB.AUDIT;

-- Data loading audit log
CREATE OR REPLACE TABLE AUDIT.DATA_LOAD_AUDIT (
    AUDIT_ID INT AUTOINCREMENT PRIMARY KEY,
    TABLE_NAME STRING NOT NULL,
    BATCH_ID STRING NOT NULL,
    RECORDS_LOADED INT DEFAULT 0,
    RECORDS_ERROR INT DEFAULT 0,
    LOAD_STATUS STRING CHECK (LOAD_STATUS IN ('SUCCESS', 'PARTIAL', 'FAILED')),
    START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    END_TIME TIMESTAMP,
    ERROR_MESSAGE STRING,
    CREATED_BY STRING DEFAULT CURRENT_USER()
) COMMENT = 'Audit log for data loading operations';

-- Data quality audit log
CREATE OR REPLACE TABLE AUDIT.DATA_QUALITY_AUDIT (
    AUDIT_ID INT AUTOINCREMENT PRIMARY KEY,
    TABLE_NAME STRING NOT NULL,
    CHECK_TYPE STRING CHECK (CHECK_TYPE IN ('NULL_CHECK', 'DUPLICATE_CHECK', 'REFERENTIAL_CHECK', 'FORMAT_CHECK')),
    COLUMN_NAME STRING,
    RECORDS_CHECKED INT DEFAULT 0,
    RECORDS_FAILED INT DEFAULT 0,
    CHECK_STATUS STRING CHECK (CHECK_STATUS IN ('PASSED', 'FAILED', 'WARNING')),
    CHECK_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    DETAILS STRING,
    CREATED_BY STRING DEFAULT CURRENT_USER()
) COMMENT = 'Audit log for data quality checks';

-- =====================================================
-- 8. GRANT PERMISSIONS
-- =====================================================

-- Grant usage on database and schemas
GRANT USAGE ON DATABASE PAKISTAN_SALES_OLTP_DB TO ROLE PUBLIC;
GRANT USAGE ON SCHEMA PAKISTAN_SALES_OLTP_DB.STAGING TO ROLE PUBLIC;
GRANT USAGE ON SCHEMA PAKISTAN_SALES_OLTP_DB.OLTP TO ROLE PUBLIC;
GRANT USAGE ON SCHEMA PAKISTAN_SALES_OLTP_DB.AUDIT TO ROLE PUBLIC;

-- Grant warehouse usage
GRANT USAGE ON WAREHOUSE PAKISTAN_OLTP_WH TO ROLE PUBLIC;
GRANT USAGE ON WAREHOUSE PAKISTAN_LOADING_WH TO ROLE PUBLIC;

-- Grant table permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA PAKISTAN_SALES_OLTP_DB.OLTP TO ROLE PUBLIC;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA PAKISTAN_SALES_OLTP_DB.STAGING TO ROLE PUBLIC;
GRANT SELECT, INSERT ON ALL TABLES IN SCHEMA PAKISTAN_SALES_OLTP_DB.AUDIT TO ROLE PUBLIC;

-- Grant future table permissions
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA PAKISTAN_SALES_OLTP_DB.OLTP TO ROLE PUBLIC;
GRANT SELECT, INSERT, UPDATE, DELETE ON FUTURE TABLES IN SCHEMA PAKISTAN_SALES_OLTP_DB.STAGING TO ROLE PUBLIC;
GRANT SELECT, INSERT ON FUTURE TABLES IN SCHEMA PAKISTAN_SALES_OLTP_DB.AUDIT TO ROLE PUBLIC;

-- =====================================================
-- 9. VERIFICATION QUERIES
-- =====================================================

USE SCHEMA PAKISTAN_SALES_OLTP_DB.OLTP;

-- Verify table creation
SELECT 
    TABLE_SCHEMA,
    TABLE_NAME,
    ROW_COUNT,
    BYTES,
    CREATED
FROM INFORMATION_SCHEMA.TABLES 
WHERE TABLE_SCHEMA = 'OLTP'
ORDER BY TABLE_NAME;

-- Verify indexes
SELECT 
    INDEX_NAME,
    TABLE_NAME,
    COLUMN_NAME
FROM INFORMATION_SCHEMA.INDEXES 
WHERE TABLE_SCHEMA = 'OLTP'
ORDER BY TABLE_NAME, INDEX_NAME;

-- =====================================================
-- SUMMARY
-- =====================================================
/*
OLTP Database Setup Complete!

What was created:
✅ Database: PAKISTAN_SALES_OLTP_DB
✅ Schemas: STAGING, OLTP, AUDIT
✅ Warehouses: PAKISTAN_OLTP_WH, PAKISTAN_LOADING_WH
✅ Tables: 8 normalized tables (3NF structure)
✅ Indexes: Performance optimization indexes
✅ Staging tables: For data loading
✅ Audit tables: For monitoring and compliance
✅ Permissions: Proper access control

Next steps:
1. Load data from CSV files to staging tables
2. Transform and load data to OLTP tables
3. Create OLAP data warehouse
4. Build ETL processes
5. Deploy Streamlit application
*/
